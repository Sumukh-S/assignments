1. Explain different types of Errors in Java
   - Syntax Errors: Occur due to incorrect syntax.
   - Runtime Errors: Occur during execution, such as dividing by zero.
   - Logical Errors: Occur when the logic is incorrect, leading to unexpected results.

2. What is an Exception in Java
   - An exception is an event that disrupts the normal flow of the program.
   - It occurs during runtime and can be handled using try-catch blocks.

3. How can you handle exceptions in Java? Explain with an example
   - Exceptions are handled using try, catch, finally, and throw keywords.
   - Example:
     try {
         int a = 10 / 0; // This will throw an exception
     } catch (ArithmeticException e) {
         System.out.println("Cannot divide by zero");
     } finally {
         System.out.println("Execution completed");
     }

4. Why do we need exception handling in Java
   - Prevents abrupt termination of the program.
   - Helps in debugging and maintaining code reliability.
   - Ensures smooth program execution even if an error occurs.

5. What is the difference between exception and error in Java
   - Exceptions are recoverable runtime issues (e.g., NullPointerException, IOException).
   - Errors are serious issues that cannot be recovered (e.g., OutOfMemoryError, StackOverflowError).

6. Name the different types of exceptions in Java
   - Checked Exceptions: Must be handled at compile-time (e.g., IOException, SQLException).
   - Unchecked Exceptions: Occur at runtime and are not checked at compile-time (e.g., NullPointerException, ArithmeticException).
   - Errors: Serious problems that should not be caught (e.g., OutOfMemoryError, StackOverflowError).

7. Can we just use try instead of finally and catch blocks?
   - No, a try block must be followed by either a catch block or a finally block.
   - The catch block handles exceptions, while the finally block executes cleanup code regardless of exceptions.