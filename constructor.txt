1. What is a Constructor?
A constructor is a special method in Java used to initialize objects. It has the same name as the class and no return type.

2. What is Constructor Chaining?
Constructor chaining is the process of calling one constructor from another within the same class or from a parent class using this() or super().

3. Can we call a subclass constructor from a superclass constructor?
No, a superclass constructor cannot call a subclass constructor directly. However, a subclass constructor automatically calls the superclass constructor using super().

4. What happens if you keep a return type for a constructor?
If a return type is specified, it will be treated as a normal method and not a constructor.

5. What is No-arg constructor?
A constructor with no parameters is called a no-arg constructor. It initializes an object with default values.

6. How is a No-argument constructor different from the default Constructor?
A default constructor is automatically provided by Java if no constructor is defined, while a no-arg constructor is explicitly defined by the user.

7. When do we need Constructor Overloading?
Constructor overloading is needed when we want to initialize objects in different ways by providing multiple constructors with different parameters.

8. What is Default constructor? Explain with an Example.
A default constructor is a constructor with no parameters, provided by Java if no other constructor is defined.

Example:
class Example {
    Example() {
        System.out.println("Default constructor called");
    }
    public static void main(String[] args) {
        Example obj = new Example();
    }
}

