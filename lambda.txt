1. What is a Lambda Expression in Java 8?
   - A lambda expression is a concise way to represent an anonymous function.
   - It simplifies the implementation of functional interfaces.
   - Syntax: (parameters) -> {expression}

   Example:
   interface MathOperation {
       int operation(int a, int b);
   }

   public class LambdaExample {
       public static void main(String[] args) {
           MathOperation addition = (a, b) -> a + b;
           System.out.println("Sum: " + addition.operation(5, 3));
       }
   }

2. Can You Pass Lambda Expressions to a Method?
   - Yes, lambda expressions can be passed to a method where a functional interface is expected.

   Example:
   interface Printer {
       void print(String message);
   }

   public class LambdaDemo {
       static void showMessage(String message, Printer printer) {
           printer.print(message);
       }

       public static void main(String[] args) {
           showMessage("Hello, Lambda!", msg -> System.out.println(msg));
       }
   }

3. What is a Functional Interface in Java 8?
   - An interface with exactly one abstract method.
   - Can have multiple default and static methods.
   - Annotated with @FunctionalInterface (optional).

   Example:
   @FunctionalInterface
   interface Greeting {
       void sayHello();
   }

   public class FunctionalInterfaceExample {
       public static void main(String[] args) {
           Greeting greet = () -> System.out.println("Hello, world!");
           greet.sayHello();
       }
   }

4. Why Use Lambda Expressions in Java?
   - Reduces boilerplate code.
   - Improves readability and maintainability.
   - Enables functional programming in Java.

5. Is it Mandatory for a Lambda Expression to Have Parameters?
   - No, a lambda expression can have zero, one, or multiple parameters.

   Examples:
   - No parameter: () -> System.out.println("Hello")
   - One parameter: name -> System.out.println("Hello, " + name)
   - Multiple parameters: (a, b) -> a + b